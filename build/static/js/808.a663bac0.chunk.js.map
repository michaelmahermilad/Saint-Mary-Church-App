{"version":3,"file":"static/js/808.a663bac0.chunk.js","mappings":"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","sources":["Pages/Qr.jsx","firebase.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { database } from \"../firebase\";\r\nimport { ref, onValue, set, get, child } from \"firebase/database\";\r\nimport yes from \"./yes.webp\";\r\n\r\nfunction Qr() {\r\n  const { date, name, duration, score } = useParams();\r\n  const navigate = useNavigate();\r\n  const [remain, setRemain] = useState(\"Calculating...\");\r\n  const [result, setResult] = useState(\"No result\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (new Date().toISOString().split(\".\")[0] > date) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const calculateRemainingTime = () => {\r\n      try {\r\n        let time = date?.split(\"T\")[1];\r\n        let hours = time?.split(\":\")[0];\r\n        let minutes = time?.split(\":\")[1];\r\n        let timenowinminutes = Number(hours) * 60 + Number(minutes);\r\n        let datenow = new Date().toISOString();\r\n        let timenow = datenow?.split(\"T\")[1];\r\n        let hoursnow = timenow?.split(\":\")[0];\r\n        let miuutesnow = timenow?.split(\":\")[1];\r\n        let nowinmiuntes = Number(hoursnow) * 60 + Number(miuutesnow);\r\n        let miutesremaining = Number(timenowinminutes) - Number(nowinmiuntes);\r\n        let hoursremaining = 0;\r\n        let valueofhours = parseInt(miutesremaining / 60);\r\n        \r\n        if (valueofhours >= 1) {\r\n          miutesremaining = miutesremaining - valueofhours * 60;\r\n          hoursremaining = valueofhours;\r\n        }\r\n        \r\n        setRemain(`${hoursremaining} H:${miutesremaining} M Left`);\r\n      } catch (err) {\r\n        console.error(\"Error calculating time:\", err);\r\n        setRemain(\"Time calculation error\");\r\n      }\r\n    };\r\n\r\n    calculateRemainingTime();\r\n    const interval = setInterval(calculateRemainingTime, 40000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [date, navigate]);\r\n\r\n  const handleScan = async (data) => {\r\n    if (!data) return;\r\n\r\n    try {\r\n      if (!name || !duration || !date || !score) {\r\n        setError(\"Missing required parameters\");\r\n        return;\r\n      }\r\n\r\n      const userId = data.split(\"@\")[0];\r\n      const ID = `${date}<>${name}<>${userId}`;\r\n      const attendanceRef = ref(database, `Elma7domen/${userId}/attendance/${ID}`);\r\n      \r\n      const snapshot = await get(attendanceRef);\r\n      \r\n      if (!snapshot.exists()) {\r\n        await set(attendanceRef, {\r\n          date,\r\n          name,\r\n          duration,\r\n          result: data,\r\n          score,\r\n          ID,\r\n        });\r\n\r\n        const scoreRef = ref(database, `Elma7domen/${userId}/attendance/score`);\r\n        const scoreSnapshot = await get(scoreRef);\r\n        \r\n        if (scoreSnapshot.exists()) {\r\n          const newfinal = Number(scoreSnapshot.val()?.final || 0) + Number(score);\r\n          await set(scoreRef, { final: newfinal });\r\n        } else {\r\n          await set(scoreRef, { final: score });\r\n        }\r\n        \r\n        setResult(\"تم تسجيل الحضور بنجاح\");\r\n      } else {\r\n        setResult(\"تم تسجيل الحضور مسبقاً\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error handling scan:\", err);\r\n      setError(\"حدث خطأ أثناء تسجيل الحضور\");\r\n    }\r\n  };\r\n\r\n  const handleError = (err) => {\r\n    console.error(\"QR Scanner error:\", err);\r\n    setError(\"خطأ في الماسح الضوئي\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"background10\"\r\n      style={{\r\n        width: \"100vw\",\r\n        overflow: \"hidden\",\r\n        overflowY: \"scroll\",\r\n        height: \"100vh\",\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-around\",\r\n      }}\r\n    >\r\n      {new Date().toISOString().split(\".\")[0] < date ? (\r\n        <>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              margin: \"1rem\",\r\n            }}\r\n          >\r\n            <h3 className=\"Select7 background10\">{name}</h3>\r\n            <h4 className=\"Select7\" style={{ marginTop: \"2rem\" }}>\r\n              {remain}\r\n            </h4>\r\n            <h3 className=\"heading2444\" style={{ marginTop: \"3rem\" }}>\r\n              {error || result}\r\n            </h3>\r\n            <img style={{ marginTop: \"3rem\" }} src={yes} className=\"h07\" alt=\"Success\" />\r\n          </div>\r\n          {result === \"No result\" && (\r\n            <div>\r\n              <div\r\n                style={{\r\n                  boxShadow: \".2px 3px 10px 2px grey\",\r\n                  borderRadius: \"17px\",\r\n                  overflow: \"hidden\",\r\n                }}\r\n              >\r\n                <QrReader\r\n                  className=\"h07\"\r\n                  delay={2000}\r\n                  onError={handleError}\r\n                  onScan={handleScan}\r\n                  facingMode=\"environment\"\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>انتهت المحاضرة</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Qr;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC0je3firquV-pcNWyLbHFUIFlVWXaGfbs\",\r\n  authDomain: \"saint-mary-church.firebaseapp.com\",\r\n  databaseURL: \"https://saint-mary-church-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"saint-mary-church\",\r\n  storageBucket: \"saint-mary-church.appspot.com\",\r\n  messagingSenderId: \"26728570187\",\r\n  appId: \"1:26728570187:web:8fdd5f81a127eec72adcce\",\r\n  measurementId: \"G-4L41GGSZ22\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst database = getDatabase(app);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport { db, auth, provider, database };\r\n"],"names":["date","name","duration","score","useParams","navigate","useNavigate","remain","setRemain","useState","result","setResult","error","setError","useEffect","Date","toISOString","split","calculateRemainingTime","time","hours","minutes","timenowinminutes","Number","datenow","timenow","hoursnow","miuutesnow","nowinmiuntes","miutesremaining","hoursremaining","valueofhours","parseInt","concat","err","console","interval","setInterval","clearInterval","_jsx","className","style","width","overflow","overflowY","height","position","display","flexDirection","flexWrap","alignItems","justifyContent","children","_jsxs","_Fragment","margin","marginTop","src","yes","alt","boxShadow","borderRadius","QrReader","delay","onError","onScan","async","data","userId","ID","attendanceRef","ref","database","get","exists","set","scoreRef","scoreSnapshot","_scoreSnapshot$val","newfinal","val","final","facingMode","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getDatabase","auth","getFirestore","getAuth","provider","GoogleAuthProvider"],"sourceRoot":""}